{"ast":null,"code":"\"use strict\";\n\nfunction _interopDefault(t) {\n  return t && \"object\" == typeof t && \"default\" in t ? t.default : t;\n}\n\nvar IO = _interopDefault(require(\"socket.io-client\")),\n    config = {\n  serverUrl: \"https://server.sync.hamoni.tech/\"\n},\n    _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n  return typeof t;\n} : function (t) {\n  return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n},\n    classCallCheck = function (t, e) {\n  if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n},\n    createClass = function () {\n  function t(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var a = e[n];\n      a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);\n    }\n  }\n\n  return function (e, n, a) {\n    return n && t(e.prototype, n), a && t(e, a), e;\n  };\n}(),\n    Value = function () {\n  function t(e, n, a, i) {\n    var o = this;\n    classCallCheck(this, t), this._io = n, this._stateName = a, this._state = i, this._UpdateCallbacks = [], this._syncCallbacks = [], this._io.on(\"value-updated-\" + e + \"-\" + a, function (t) {\n      o._state = t, o._UpdateCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"reconnect\", function () {\n      o._io.emit(\"get-state\", o._stateName, function (t) {\n        t.error || t.rev !== o._state.rev && (o._state = t, o._syncCallbacks.forEach(function (e) {\n          return e(t.data);\n        }));\n      });\n    });\n  }\n\n  return createClass(t, [{\n    key: \"update\",\n    value: function (t) {\n      if (null === t || void 0 === t) throw Error(\"State cannot be empty\");\n      if (\"function\" == typeof t || \"object\" === (void 0 === t ? \"undefined\" : _typeof(t))) throw Error(\"State has an invalid type\");\n\n      this._io.emit(\"update-value\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: t\n      });\n    }\n  }, {\n    key: \"onUpdated\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expect a function but got an invalid parameter type\");\n\n      this._UpdateCallbacks.push(t);\n    }\n  }, {\n    key: \"onSync\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._syncCallbacks.push(t);\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      return this._state.data;\n    }\n  }]), t;\n}(),\n    Obj = function () {\n  function t(e, n, a, i) {\n    var o = this;\n    classCallCheck(this, t), this._io = n, this._stateName = a, this._state = i, this._UpdateCallbacks = [], this._syncCallbacks = [], this._io.on(\"object-updated-\" + e + \"-\" + a, function (t) {\n      o._state = t, o._UpdateCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"reconnect\", function () {\n      o._io.emit(\"get-state\", o._stateName, function (t) {\n        t.error || t.rev !== o._state.rev && (o._state = t, o._syncCallbacks.forEach(function (e) {\n          return e(t.data);\n        }));\n      });\n    });\n  }\n\n  return createClass(t, [{\n    key: \"update\",\n    value: function (t) {\n      if (\"object\" !== (void 0 === t ? \"undefined\" : _typeof(t)) || null === t || void 0 === t) throw Error(\"State is invalid\");\n\n      this._io.emit(\"update-object\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: t\n      });\n    }\n  }, {\n    key: \"onUpdated\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expect a function but got an invalid parameter type\");\n\n      this._UpdateCallbacks.push(t);\n    }\n  }, {\n    key: \"onSync\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._syncCallbacks.push(t);\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      return this._state.data;\n    }\n  }]), t;\n}(),\n    List = function () {\n  function t(e, n, a, i) {\n    var o = this;\n    classCallCheck(this, t), this._io = n, this._stateName = a, this._state = i, this._itemUpdatedCallbacks = [], this._itemRemovedCallbacks = [], this._itemAddedCallbacks = [], this._resetCallbacks = [], this._syncCallbacks = [], this._io.on(\"item-updated-\" + e + \"-\" + a, function (t) {\n      o._state.rev = t.rev, o._state.data[t.data.index] = t.data.value, o._itemUpdatedCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"item-deleted-\" + e + \"-\" + a, function (t) {\n      o._state.rev = t.rev, o._state.data.splice(t.data.index, 1), o._itemRemovedCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"item-added-\" + e + \"-\" + a, function (t) {\n      o._state.rev = t.rev, o._state.data[t.data.index] = t.data.value, o._itemAddedCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"list-reset-\" + e + \"-\" + a, function (t) {\n      o._state.rev = t.rev, o._state.data = t.data, o._resetCallbacks.forEach(function (e) {\n        return e(t.data);\n      });\n    }), this._io.on(\"reconnect\", function () {\n      o._io.emit(\"get-state\", o._stateName, function (t) {\n        t.error || t.rev !== o._state.rev && (o._state = t, o._syncCallbacks.forEach(function (e) {\n          return e(t.data);\n        }));\n      });\n    });\n  }\n\n  return createClass(t, [{\n    key: \"onReset\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._resetCallbacks.push(t);\n    }\n  }, {\n    key: \"onItemAdded\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._itemAddedCallbacks.push(t);\n    }\n  }, {\n    key: \"onItemUpdated\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._itemUpdatedCallbacks.push(t);\n    }\n  }, {\n    key: \"onItemRemoved\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._itemRemovedCallbacks.push(t);\n    }\n  }, {\n    key: \"onSync\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._syncCallbacks.push(t);\n    }\n  }, {\n    key: \"update\",\n    value: function (t, e) {\n      if (null === e || void 0 === e) throw Error(\"State is invalid\");\n\n      this._io.emit(\"list-update\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: {\n          value: e,\n          index: t\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function (t) {\n      if (isNaN(t)) throw Error(\"Index is invalid\");\n      if (!this._state.data[t]) throw Error(\"There's no item at the specified index\");\n\n      this._io.emit(\"list-remove\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: {\n          index: t\n        }\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function (t) {\n      if (null === t || void 0 === t) throw Error(\"State is invalid\");\n\n      this._io.emit(\"list-add\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: t\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function (t) {\n      if (\"Array\" !== t.constructor.name || null === t || void 0 === t) throw Error(\"State is invalid\");\n      if (t.length < 1) throw Error(\"State cannot be an empty array\");\n\n      this._io.emit(\"reset-list\", {\n        name: this._stateName,\n        rev: this._state.rev,\n        state: t\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function () {\n      return this._state.data;\n    }\n  }, {\n    key: \"getByIndex\",\n    value: function (t) {\n      return this._state.data[t];\n    }\n  }]), t;\n}(),\n    HamoniSync = function () {\n  function t(e) {\n    if (classCallCheck(this, t), !e) throw new Error(\"token is needed to initiliase Hamoni Sync SDK\");\n    this._token = e, this._reconnectedCallbacks = [], this._disconnectedCallbacks = [], this._appId = \"\";\n  }\n\n  return createClass(t, [{\n    key: \"connect\",\n    value: function () {\n      var t = this;\n      return new Promise(function (e, n) {\n        t._io = IO(config.serverUrl, {\n          query: {\n            sdktoken: t._token\n          }\n        }), t._io.once(\"connect\", function () {\n          t._io.emit(\"get-id\", \"\", function (n) {\n            t._appId = n, e();\n          });\n        }), t._io.once(\"connect_error\", function (t) {\n          return n(t);\n        }), t._io.once(\"error\", function (t) {\n          return n(t);\n        }), t._io.on(\"reconnect\", function () {\n          return t._reconnectedCallbacks.forEach(function (t) {\n            return t();\n          });\n        }), t._io.on(\"disconnect\", function (e) {\n          var n = \"\";\n          n = \"io client disconnect\" === e ? \"client disconnect\" : \"server unavailable\", t._disconnectedCallbacks.forEach(function (t) {\n            return t(n);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"createValue\",\n    value: function (t, e) {\n      var n = this;\n      return new Promise(function (a, i) {\n        null === e || void 0 === e ? i(\"State cannot be empty\") : \"function\" == typeof e || \"object\" === (void 0 === e ? \"undefined\" : _typeof(e)) ? i(\"State has an invalid type\") : n._io.emit(\"create-value\", {\n          name: t,\n          state: e\n        }, function (e) {\n          e.error ? i(e.error) : a(new Value(n._appId, n._io, t, e));\n        });\n      });\n    }\n  }, {\n    key: \"createObject\",\n    value: function (t, e) {\n      var n = this;\n      return new Promise(function (a, i) {\n        \"object\" !== (void 0 === e ? \"undefined\" : _typeof(e)) || null === e || void 0 === e ? i(\"State is invalid\") : n._io.emit(\"create-object\", {\n          name: t,\n          state: e\n        }, function (e) {\n          e.error ? i(e.error) : a(new Obj(n._appId, n._io, t, e));\n        });\n      });\n    }\n  }, {\n    key: \"createList\",\n    value: function (t, e) {\n      var n = this;\n      return new Promise(function (a, i) {\n        \"Array\" !== e.constructor.name || null === e || void 0 === e ? i(\"State is invalid\") : e.length < 1 ? i(\"State cannot be an empty array\") : n._io.emit(\"create-list\", {\n          name: t,\n          state: e\n        }, function (e) {\n          e.error ? i(e.error) : a(new List(n._appId, n._io, t, e));\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function (t) {\n      var e = this;\n      return new Promise(function (n, a) {\n        t && \"string\" == typeof t ? e._io.emit(\"get-state\", t, function (i) {\n          i.error ? a(i.error) : \"value\" === i.type ? n(new Value(e._appId, e._io, t, i)) : \"object\" === i.type ? n(new Obj(e._appId, e._io, t, i)) : \"list\" === i.type && n(new List(e._appId, e._io, t, i));\n        }) : a(\"invalid state name passed as parameter\");\n      });\n    }\n  }, {\n    key: \"onReconnected\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._reconnectedCallbacks.push(t);\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function (t) {\n      if (\"function\" != typeof t) throw Error(\"Expected a function but got an invalid parameter type\");\n\n      this._disconnectedCallbacks.push(t);\n    }\n  }]), t;\n}();\n\nmodule.exports = HamoniSync;","map":null,"metadata":{},"sourceType":"script"}